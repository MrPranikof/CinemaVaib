Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1759842389825)
+++ b/.idea/misc.xml	(date 1759842389825)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.13 (CinemaVaib)" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.13 (CinemaVaib)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: core/style/CinemaVaib.qss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/style/CinemaVaib.qss b/core/style/CinemaVaib.qss
new file mode 100644
--- /dev/null	(date 1760817535803)
+++ b/core/style/CinemaVaib.qss	(date 1760817535803)
@@ -0,0 +1,203 @@
+/* ==========================
+   üé¨  CinemaVaib ‚Äî DARK THEME
+   –°—Ç–∏–ª—å: –º–∏–Ω–∏–º–∞–ª–∏–∑–º + –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–∏–∑–º
+   –®—Ä–∏—Ñ—Ç—ã: Oswald, Montserrat, Roboto, Open Sans
+   ========================== */
+
+/* ====== –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ====== */
+QWidget {
+    background-color: #0F1115;       /* —á—É—Ç—å —Ç–µ–ø–ª–µ–µ, —á–µ–º —á–µ—Ä–Ω—ã–π */
+    color: #EAEAEA;
+    font-family: 'Roboto', 'Open Sans', sans-serif;
+    font-size: 15px;
+}
+
+/* ====== –ó–ê–ì–û–õ–û–í–ö–ò ====== */
+QLabel#TitleLabel {
+    font-family: 'Oswald';
+    font-size: 28px;
+    font-weight: 600;
+    color: #FFFFFF;
+    letter-spacing: 1px;
+}
+
+QLabel#SectionLabel {
+    font-family: 'Montserrat';
+    font-weight: 600;
+    font-size: 18px;
+    color: #DDDDDD;
+    border-bottom: 2px solid #00A8E8;
+    padding-bottom: 4px;
+    margin-top: 12px;
+    margin-bottom: 8px;
+}
+
+/* ====== –¢–ï–ö–°–¢–û–í–´–ï –ü–û–õ–Ø ====== */
+QLineEdit {
+    background-color: #25272B;
+    border: 1px solid #35383D;
+    border-radius: 6px;
+    padding: 10px;
+    color: #EAEAEA;
+}
+QLineEdit:focus {
+    border-color: #00A8E8;
+}
+
+/* ====== –ö–ù–û–ü–ö–ò ====== */
+QPushButton {
+    background-color: #00A8E8;
+    color: #FFF;
+    font-family: 'Montserrat';
+    font-weight: 600;
+    font-size: 16px;
+    border-radius: 6px;
+    padding: 10px;
+}
+QPushButton:hover { background-color: #03B7F5; }
+QPushButton:pressed { background-color: #0085C0; }
+
+/* –ö–Ω–æ–ø–∫–∞-–≥–ª–∞–∑ */
+QPushButton#PassToggle {
+    background: transparent;
+    border: none;
+    padding: 0;
+}
+QPushButton#PassToggle:hover {
+    background-color: rgba(255,255,255,0.08);
+    border-radius: 4px;
+}
+
+/* ====== –°–°–´–õ–ö–ò ====== */
+QLabel#LinkLabel {
+    color: #00A8E8;
+    font-size: 14px;
+}
+QLabel#LinkLabel:hover {
+    color: #03B7F5;
+}
+
+/* ====== TABLE / HEADER ====== */
+QTableWidget {
+    background-color: #1E1E1E;
+    border: 1px solid #2F2F2F;
+    gridline-color: #2F2F2F;
+    border-radius: 3px;
+    selection-background-color: #00A8E8;
+    selection-color: #FFFFFF;
+    font-family: 'Open Sans';
+}
+QHeaderView::section {
+    background-color: #2A2A2A;
+    font-family: 'Montserrat';
+    font-weight: 600;
+    font-size: 14px;
+    color: #EAEAEA;
+    border: none;
+    border-bottom: 1px solid #333;
+    padding: 6px;
+}
+
+/* ====== DIALOG / POPUP ====== */
+QDialog {
+    background-color: #181818;
+    border: 1px solid #00A8E8;
+    border-radius: 4px;
+}
+
+/* ====== SCROLLBAR ====== */
+QScrollBar:vertical {
+    background: #1C1C1C;
+    width: 8px;
+    margin: 2px;
+    border-radius: 4px;
+}
+QScrollBar::handle:vertical {
+    background: #434343;
+    border-radius: 4px;
+}
+QScrollBar::handle:vertical:hover {
+    background: #00A8E8;
+}
+QScrollBar::add-line, QScrollBar::sub-line {
+    height: 0;
+}
+
+/* ====== STATUS COLORS ====== */
+QLabel#SuccessLabel {
+    color: #55C78C;
+    font-weight: 600;
+}
+QLabel#ErrorLabel {
+    color: #E63946;
+    font-weight: 600;
+}
+
+/* ====== HIGHLIGHTS / BORDER‚ÄëELEMENTS ====== */
+QFrame#line {
+    background-color: #00A8E8;
+    max-height: 2px;
+}
+
+QFrame#FormContainer {
+    background-color: #1C1E22;
+    border-radius: 12px;
+    padding: 40px 32px 24px 32px;
+}
+
+QLabel {
+    background-color: transparent;
+}
+
+QLabel#BrandLabel {
+    font-family: 'Oswald', sans-serif;
+    font-size: 32px;
+    font-weight: 700;
+    color: #00CFFF;
+    letter-spacing: 1px;
+    margin-bottom: 16px;
+}
+QLabel#BrandLabel:hover {
+    color: #00E0FF;
+}
+
+/* Header */
+QWidget#HeaderBar {
+    background-color: #16181C;
+    border-bottom: 1px solid #00A8E8;
+}
+QLabel#HeaderLogo { background: transparent; }
+QPushButton#HeaderButton {
+    background: transparent;
+    color: #EAEAEA;
+    font-family: 'Montserrat';
+    font-size: 14px;
+    border: 1px solid transparent;
+    padding: 4px 12px;
+    border-radius: 4px;
+}
+QPushButton#HeaderButton:hover {
+    border: 1px solid #00A8E8;
+    color: #00CFFF;
+}
+
+/* Content */
+QWidget#ContentArea {
+    background-color: #0F1115;
+}
+QLabel#MainLabel {
+    font-family: 'Oswald';
+    font-size: 22px;
+    color: #EAEAEA;
+}
+
+/* Footer */
+QWidget#FooterBar {
+    background-color: #16181C;
+    border-top: 1px solid #00A8E8;
+}
+QLabel#FooterText {
+    font-family: 'Open Sans';
+    font-size: 13px;
+    color: #7A7A7A;
+}
\ No newline at end of file
Index: .idea/CinemaVaib.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/CinemaVaib.iml b/.idea/CinemaVaib.iml
new file mode 100644
--- /dev/null	(date 1759841761871)
+++ b/.idea/CinemaVaib.iml	(date 1759841761871)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.13 (CinemaVaib)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: core/database.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/database.py b/core/database.py
new file mode 100644
--- /dev/null	(date 1760641335201)
+++ b/core/database.py	(date 1760641335201)
@@ -0,0 +1,15 @@
+import psycopg2
+
+def query(sql, params=None):
+    try:
+        with psycopg2.connect("dbname=cinemavaib_db host=localhost port=5432 user=postgres") as conn:
+            with conn.cursor() as cur:
+                cur.execute(sql, params)
+                if cur.description is not None:
+                    return cur.fetchall()
+                else:
+                    conn.commit()
+                    return None
+    except Exception as e:
+        print(f"–û—à–∏–±–∫–∞: {e}")
+        return None
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1760818542127)
+++ b/.idea/vcs.xml	(date 1760818542127)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: ViewModels/MainViewModel.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ViewModels/MainViewModel.py b/ViewModels/MainViewModel.py
new file mode 100644
--- /dev/null	(date 1760789079422)
+++ b/ViewModels/MainViewModel.py	(date 1760789079422)
@@ -0,0 +1,7 @@
+from PyQt6.QtCore import QObject, pyqtSignal
+from Models.UserModel import UserModel
+
+class MainViewModel(QObject):
+    @staticmethod
+    def get_role_id(login: str):
+        return UserModel.get_user_role_id(login)
\ No newline at end of file
Index: core/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/utils.py b/core/utils.py
new file mode 100644
--- /dev/null	(date 1760642338650)
+++ b/core/utils.py	(date 1760642338650)
@@ -0,0 +1,16 @@
+from argon2 import PasswordHasher
+from argon2.exceptions import VerifyMismatchError
+
+ph = PasswordHasher()
+
+def hash_password(password):
+    return ph.hash(password)
+
+def verify_password(hashed_password, password):
+    try:
+        return ph.verify(hashed_password, password)
+    except VerifyMismatchError:
+        return False
+    except Exception as e:
+        print(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
+        return False
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1759841761906)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1759841761906)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
new file mode 100644
--- /dev/null	(date 1760811516822)
+++ b/main.py	(date 1760811516822)
@@ -0,0 +1,55 @@
+import sys
+
+from PyQt6.QtGui import QFontDatabase, QIcon
+from PyQt6.QtWidgets import QApplication, QStackedWidget
+from Views.LoginView import LoginView
+from Views.RegisterView import RegisterView
+from Views.MainView import MainView
+
+
+class App(QStackedWidget):
+    def __init__(self):
+        super().__init__()
+        self.setWindowIcon(QIcon('images/iconLogo.png'))
+        self.setWindowTitle('CinemaVaib')
+        self.setFixedSize(1024, 600)
+
+        self.login = LoginView(self.show_register, self.show_main)
+        self.register = RegisterView(self.show_login)
+        self.main = MainView()
+
+        self.addWidget(self.login)
+        self.addWidget(self.register)
+        self.addWidget(self.main)
+
+        self.show_login()
+
+    def show_login(self):
+        self.setCurrentWidget(self.login)
+
+    def show_register(self):
+        self.setCurrentWidget(self.register)
+
+    def show_main(self, login):
+        self.main.set_user(login)
+        self.setCurrentWidget(self.main)
+
+    def apply_style(app):
+        QFontDatabase.addApplicationFont("fonts/Oswald-Regular.ttf")
+        QFontDatabase.addApplicationFont("fonts/Montserrat-Regular.ttf")
+        QFontDatabase.addApplicationFont("fonts/Roboto-Regular.ttf")
+        QFontDatabase.addApplicationFont("fonts/OpenSans-Regular.ttf")
+
+        with open("core/style/CinemaVaib.qss", "r", encoding="utf-8") as f:
+            app.setStyleSheet(f.read())
+
+
+def main():
+    app = QApplication(sys.argv)
+    App.apply_style(app)
+    win = App()
+    win.show()
+    sys.exit(app.exec())
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
Index: core/DB_Script/cinema_vaib_dbscript.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/DB_Script/cinema_vaib_dbscript.sql b/core/DB_Script/cinema_vaib_dbscript.sql
new file mode 100644
--- /dev/null	(date 1760635203367)
+++ b/core/DB_Script/cinema_vaib_dbscript.sql	(date 1760635203367)
@@ -0,0 +1,311 @@
+-- –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
+CREATE DATABASE cinemavaib_db;
+
+\c cinemavaib_db
+
+CREATE TABLE roles (
+    role_id SERIAL PRIMARY KEY,
+    role_name VARCHAR(50) UNIQUE NOT NULL
+);
+
+CREATE TABLE users (
+    user_id SERIAL PRIMARY KEY,
+    login VARCHAR(50) UNIQUE NOT NULL,
+    password_hash TEXT NOT NULL,
+    email VARCHAR(100) UNIQUE NOT NULL,
+    role_id INT DEFAULT 1
+        CONSTRAINT fk_role_id
+        REFERENCES roles(role_id)
+        ON DELETE RESTRICT
+        ON UPDATE CASCADE,
+    status VARCHAR(50) CHECK (status IN ('Active', 'Inactive')) DEFAULT 'Active' NOT NULL,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    last_login TIMESTAMP DEFAULT NULL
+);
+
+CREATE TABLE movies (
+    movie_id SERIAL PRIMARY KEY,
+    title VARCHAR(255) NOT NULL,
+    description TEXT NOT NULL,
+    movie_image BYTEA NOT NULL,
+    base_price DECIMAL(8,2) DEFAULT 300.00 NOT NULL,
+    rating DECIMAL(2,1) DEFAULT 0.0 NOT NULL,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE genres (
+    genre_id SERIAL PRIMARY KEY,
+    name VARCHAR(100) UNIQUE NOT NULL,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE director (
+    director_id SERIAL PRIMARY KEY,
+    fullname VARCHAR(255) NOT NULL,
+    photo BYTEA NOT NULL,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE actor (
+    actor_id SERIAL PRIMARY KEY,
+    fullname VARCHAR(255) NOT NULL,
+    photo BYTEA NOT NULL,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE movie_genre (
+    movie_id INT NOT NULL
+        REFERENCES movies(movie_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    genre_id INT NOT NULL
+        REFERENCES genres(genre_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    PRIMARY KEY (movie_id, genre_id)
+);
+
+CREATE TABLE movie_director (
+    movie_id INT NOT NULL
+        REFERENCES movies(movie_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    director_id INT NOT NULL
+        REFERENCES director(director_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    PRIMARY KEY (movie_id, director_id)
+);
+
+CREATE TABLE movie_actor (
+    movie_id INT NOT NULL
+        REFERENCES movies(movie_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    actor_id INT NOT NULL
+        REFERENCES actor(actor_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    role VARCHAR(100),
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    PRIMARY KEY (movie_id, actor_id)
+);
+
+CREATE TABLE review (
+    review_id SERIAL PRIMARY KEY,
+    user_id INT NOT NULL
+        REFERENCES users(user_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    movie_id INT NOT NULL
+        REFERENCES movies(movie_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    rating INT CHECK(rating BETWEEN 0 AND 5),
+    comment TEXT,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE watchlist (
+    watchlist_id SERIAL PRIMARY KEY,
+    user_id INT NOT NULL
+        REFERENCES users(user_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    movie_id INT NOT NULL
+        REFERENCES movies(movie_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    status VARCHAR(50) DEFAULT 'Planned' NOT NULL,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE hall (
+    hall_id SERIAL PRIMARY KEY,
+    hall_number INT NOT NULL,
+    hall_name VARCHAR(100),
+    hall_type VARCHAR(100),
+    hall_extra_price DECIMAL(8,2) DEFAULT 0.00 NOT NULL,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE seat (
+    seat_id SERIAL PRIMARY KEY,
+    hall_id INT NOT NULL
+        REFERENCES hall(hall_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    row_number INT NOT NULL,
+    seat_number INT NOT NULL,
+    seat_extra_price DECIMAL(8,2) DEFAULT 0.00 NOT NULL,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE session (
+    session_id SERIAL PRIMARY KEY,
+    movie_id INT NOT NULL
+        REFERENCES movies(movie_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    hall_id INT NOT NULL
+        REFERENCES hall(hall_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    session_time TIMESTAMP NOT NULL,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE ticket (
+    ticket_id SERIAL PRIMARY KEY,
+    session_id INT NOT NULL
+        REFERENCES session(session_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    user_id INT NOT NULL
+        REFERENCES users(user_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    seat_id INT NOT NULL
+        REFERENCES seat(seat_id)
+        ON DELETE CASCADE
+        ON UPDATE CASCADE,
+    percent_discount DECIMAL(5,2) DEFAULT 0.00 NOT NULL,
+    final_price DECIMAL(8,2) NOT NULL,
+    final_price_discount DECIMAL(8,2),
+    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE activity_log (
+    log_id SERIAL PRIMARY KEY,
+    user_id INT
+        REFERENCES users(user_id)
+        ON DELETE SET NULL
+        ON UPDATE CASCADE,
+    actor_role VARCHAR(100),
+    action_type VARCHAR(100),
+    entity_id INT,
+    description TEXT,
+    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+INSERT INTO roles (role_name)
+VALUES ('User'),
+       ('Admin');
+
+INSERT INTO users (login, password_hash, email, role_id)
+VALUES ('admin', '$argon2id$v=19$m=65536,t=3,p=4$SG7R9AcsFOVGzcI3tx3zCA$GgaEHUQkeXIyflp3sPmxqKwWPGsfLSuEId4xcU5k+uo', 'vaganogannsan@gmail.com', 2);
+
+-- –§—É–Ω–∫—Ü–∏–∏
+-- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
+CREATE OR REPLACE FUNCTION set_updated_at()
+RETURNS TRIGGER AS $$
+BEGIN
+    NEW.updated_at := CURRENT_TIMESTAMP;
+    RETURN NEW;
+END;
+$$ LANGUAGE plpgsql;
+
+CREATE OR REPLACE FUNCTION calc_ticket_price()
+RETURNS TRIGGER AS $$
+DECLARE
+    v_base       DECIMAL(8,2);
+    v_hall_extra DECIMAL(8,2);
+    v_seat_extra DECIMAL(8,2);
+BEGIN
+    SELECT m.base_price, h.hall_extra_price, s.seat_extra_price
+    INTO v_base, v_hall_extra, v_seat_extra
+    FROM session se
+    JOIN movies m ON m.movie_id = se.movie_id
+    JOIN hall   h ON h.hall_id  = se.hall_id
+    JOIN seat   s ON s.seat_id  = NEW.seat_id
+    WHERE se.session_id = NEW.session_id;
+
+    NEW.final_price := COALESCE(v_base, 0)
+                     + COALESCE(v_hall_extra, 0)
+                     + COALESCE(v_seat_extra, 0);
+
+    NEW.final_price_discount := NEW.final_price
+                              - (NEW.final_price * COALESCE(NEW.percent_discount, 0) / 100);
+
+    RETURN NEW;
+END;
+$$ LANGUAGE plpgsql;
+
+-- –¢—Ä–∏–≥–≥–µ—Ä—ã
+CREATE TRIGGER trg_set_updated_at_users
+BEFORE UPDATE ON users
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_movies
+BEFORE UPDATE ON movies
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_genres
+BEFORE UPDATE ON genres
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_director
+BEFORE UPDATE ON director
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_actor
+BEFORE UPDATE ON actor
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_movie_actor
+BEFORE UPDATE ON movie_actor
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_review
+BEFORE UPDATE ON review
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_watchlist
+BEFORE UPDATE ON watchlist
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_hall
+BEFORE UPDATE ON hall
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_seat
+BEFORE UPDATE ON seat
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_session
+BEFORE UPDATE ON session
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_set_updated_at_ticket
+BEFORE UPDATE ON ticket
+FOR EACH ROW
+EXECUTE FUNCTION set_updated_at();
+
+CREATE TRIGGER trg_calc_ticket_price
+BEFORE INSERT OR UPDATE ON ticket
+FOR EACH ROW
+EXECUTE FUNCTION calc_ticket_price();
\ No newline at end of file
Index: Views/LoginView.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Views/LoginView.py b/Views/LoginView.py
new file mode 100644
--- /dev/null	(date 1760815699914)
+++ b/Views/LoginView.py	(date 1760815699914)
@@ -0,0 +1,88 @@
+from PyQt6.QtWidgets import QWidget, QVBoxLayout, QPushButton, QLabel, QLineEdit, QHBoxLayout, QFrame
+from PyQt6.QtCore import Qt, QSize
+from PyQt6.QtGui import QIcon
+from ViewModels.LoginViewModel import LoginViewModel
+
+class LoginView(QWidget):
+    def __init__(self, go_register, go_main):
+        super().__init__()
+        self.vm = LoginViewModel()
+        self.go_register = go_register
+        self.go_main = go_main
+        self.setWindowTitle('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
+
+        self.brand_label = QLabel("CinemaVaib")
+        self.brand_label.setObjectName("BrandLabel")
+        self.brand_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
+
+        layout = QVBoxLayout(self)
+
+        self.label = QLabel("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
+        self.loginInput = QLineEdit(placeholderText="–õ–æ–≥–∏–Ω")
+        self.passwordInput = QLineEdit(placeholderText="–ü–∞—Ä–æ–ª—å")
+        self.passwordInput.setEchoMode(QLineEdit.EchoMode.Password)
+
+        self.show_pass_btn = QPushButton()
+        self.show_pass_btn.setIcon(QIcon("images/showPassword.png"))
+        self.show_pass_btn.setCheckable(True)
+        self.show_pass_btn.setIconSize(QSize(28, 28))
+        self.show_pass_btn.setFixedSize(32, 32)
+        self.show_pass_btn.setFlat(True)
+        self.show_pass_btn.clicked.connect(self.toggle_password)
+
+        pass_layout = QHBoxLayout()
+        pass_layout.addWidget(self.passwordInput)
+        pass_layout.addWidget(self.show_pass_btn)
+
+
+        self.status = QLabel("")
+        self.btn_login = QPushButton("–í–æ–π—Ç–∏")
+
+        self.link_register = QLabel('<a href="#">–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å</a>')
+        self.link_register.setAlignment(Qt.AlignmentFlag.AlignCenter)
+        self.link_register.setOpenExternalLinks(False)
+        self.link_register.linkActivated.connect(lambda _: self.go_register())
+
+        card = QFrame()
+        card.setObjectName("FormContainer")
+        card.setFixedSize(500, 400)
+        form_layout = QVBoxLayout(card)
+        form_layout.addWidget(self.label)
+        form_layout.addWidget(self.loginInput)
+        form_layout.addLayout(pass_layout)
+        form_layout.addWidget(self.status)
+        form_layout.addWidget(self.btn_login)
+        form_layout.addWidget(self.link_register)
+
+        layout.addWidget(self.brand_label)
+        layout.addWidget(card)
+        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
+
+        self.btn_login.clicked.connect(self.try_login)
+
+        self.vm.login_success.connect(self.on_login_success)
+        self.vm.login_failed.connect(self.on_login_failed)
+
+    def try_login(self):
+        login = self.loginInput.text().strip()
+        password = self.passwordInput.text().strip()
+        self.vm.login(login, password)
+
+    def on_login_success(self, login):
+        self.status.setText(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}")
+        self.go_main(login)
+
+    def on_login_failed(self, msg):
+        self.status.setText(f"‚ùå {msg}")
+
+    def toggle_password(self):
+        if self.show_pass_btn.isChecked():
+            self.passwordInput.setEchoMode(QLineEdit.EchoMode.Normal)
+            self.show_pass_btn.setIcon(QIcon("images/hidePassword.png"))
+        else:
+            self.passwordInput.setEchoMode(QLineEdit.EchoMode.Password)
+            self.show_pass_btn.setIcon(QIcon("images/showPassword.png"))
+
+    def keyPressEvent(self, event):
+        if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter):
+            self.try_login()
\ No newline at end of file
Index: ViewModels/LoginViewModel.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ViewModels/LoginViewModel.py b/ViewModels/LoginViewModel.py
new file mode 100644
--- /dev/null	(date 1760740899487)
+++ b/ViewModels/LoginViewModel.py	(date 1760740899487)
@@ -0,0 +1,23 @@
+from PyQt6.QtCore import QObject, pyqtSignal
+from Models.UserModel import UserModel
+
+class LoginViewModel(QObject):
+    login_success = pyqtSignal(str)
+    login_failed = pyqtSignal(str)
+
+    def login(self, login, password):
+        if not login or not password:
+            self.login_failed.emit("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
+            return
+
+        user = UserModel.find_by_login(login)
+        if not user:
+            self.login_failed.emit("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
+            return
+
+        if UserModel.check_password(login, password):
+            self.login_success.emit(login)
+            UserModel.last_login(login)
+
+        else:
+            self.login_failed.emit("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
\ No newline at end of file
Index: Views/RegisterView.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Views/RegisterView.py b/Views/RegisterView.py
new file mode 100644
--- /dev/null	(date 1760815688204)
+++ b/Views/RegisterView.py	(date 1760815688204)
@@ -0,0 +1,104 @@
+from PyQt6.QtWidgets import (
+    QWidget, QVBoxLayout, QPushButton, QLabel,
+    QLineEdit, QHBoxLayout, QFrame
+)
+from PyQt6.QtCore import Qt, QSize
+from PyQt6.QtGui import QIcon
+from ViewModels.RegisterViewModel import RegisterViewModel
+
+
+class RegisterView(QWidget):
+    def __init__(self, go_login):
+        super().__init__()
+        self.vm = RegisterViewModel()
+        self.go_login = go_login
+
+        self.setWindowTitle("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
+
+        self.brand_label = QLabel("CinemaVaib")
+        self.brand_label.setObjectName("BrandLabel")
+        self.brand_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
+
+        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
+        layout = QVBoxLayout(self)
+
+        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
+        self.label = QLabel("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç")
+        self.loginInput = QLineEdit(placeholderText="–õ–æ–≥–∏–Ω")
+        self.emailInput = QLineEdit(placeholderText="Email")
+        self.passwordInput = QLineEdit(placeholderText="–ü–∞—Ä–æ–ª—å")
+        self.passwordInput.setEchoMode(QLineEdit.EchoMode.Password)
+
+        # –ö–Ω–æ–ø–∫–∞-–≥–ª–∞–∑ –¥–ª—è –ø–∞—Ä–æ–ª—è
+        self.show_pass_btn = QPushButton()
+        self.show_pass_btn.setIcon(QIcon("images/showPassword.png"))
+        self.show_pass_btn.setCheckable(True)
+        self.show_pass_btn.setIconSize(QSize(28, 28))
+        self.show_pass_btn.setFixedSize(32, 32)
+        self.show_pass_btn.setFlat(True)
+        self.show_pass_btn.clicked.connect(self.toggle_password)
+
+        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è + –≥–ª–∞–∑–∏–∫
+        pass_layout = QHBoxLayout()
+        pass_layout.addWidget(self.passwordInput)
+        pass_layout.addWidget(self.show_pass_btn)
+
+        # –°—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∏
+        self.status = QLabel("")
+        self.btn_register = QPushButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
+
+        # –°—Å—ã–ª–∫–∞ "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?"
+        self.link_login = QLabel('<a href="#">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏</a>')
+        self.link_login.setAlignment(Qt.AlignmentFlag.AlignCenter)
+        self.link_login.setOpenExternalLinks(False)
+        self.link_login.linkActivated.connect(lambda _: self.go_login())
+
+        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ–æ—Ä–º—ã
+        card = QFrame()
+        card.setObjectName("FormContainer")
+        card.setFixedSize(500, 400)
+        form_layout = QVBoxLayout(card)
+        form_layout.addWidget(self.label)
+        form_layout.addWidget(self.loginInput)
+        form_layout.addWidget(self.emailInput)
+        form_layout.addLayout(pass_layout)
+        form_layout.addWidget(self.status)
+        form_layout.addWidget(self.btn_register)
+        form_layout.addWidget(self.link_login)
+        form_layout.setSpacing(10)
+
+        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
+        layout.addWidget(self.brand_label)
+        layout.addWidget(card)
+        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
+
+        # –°–∏–≥–Ω–∞–ª—ã
+        self.btn_register.clicked.connect(self.try_register)
+        self.vm.register_failed.connect(self.failed_register)
+        self.vm.register_success.connect(self.success_register)
+
+    # === –õ–æ–≥–∏–∫–∞ ===
+    def try_register(self):
+        login = self.loginInput.text().strip()
+        email = self.emailInput.text().strip()
+        password = self.passwordInput.text().strip()
+        self.vm.register(login, email, password)
+
+    def failed_register(self, msg):
+        self.status.setText(f"‚ùå {msg}")
+
+    def success_register(self, login):
+        self.status.setText(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞, {login}")
+        self.go_login()
+
+    def toggle_password(self):
+        if self.show_pass_btn.isChecked():
+            self.passwordInput.setEchoMode(QLineEdit.EchoMode.Normal)
+            self.show_pass_btn.setIcon(QIcon("images/hidePassword.png"))
+        else:
+            self.passwordInput.setEchoMode(QLineEdit.EchoMode.Password)
+            self.show_pass_btn.setIcon(QIcon("images/showPassword.png"))
+
+    def keyPressEvent(self, event):
+        if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter):
+            self.try_login()
\ No newline at end of file
Index: ViewModels/RegisterViewModel.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ViewModels/RegisterViewModel.py b/ViewModels/RegisterViewModel.py
new file mode 100644
--- /dev/null	(date 1760738042483)
+++ b/ViewModels/RegisterViewModel.py	(date 1760738042483)
@@ -0,0 +1,19 @@
+from PyQt6.QtCore import QObject, pyqtSignal
+from Models.UserModel import UserModel
+
+class RegisterViewModel(QObject):
+    register_success = pyqtSignal(str)
+    register_failed = pyqtSignal(str)
+
+    def register(self, login, email, password):
+        if not login or not email or not password:
+            self.register_failed.emit("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
+            return
+        if UserModel.find_by_login(login):
+            self.register_failed.emit("–í–∞—à –ª–æ–≥–∏–Ω –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π")
+
+        if UserModel.find_by_email(login):
+            self.register_failed.emit("–í–∞—à–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é")
+
+        self.register_success.emit(login)
+        UserModel.create_user(login, email, password)
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1759841761886)
+++ b/.idea/modules.xml	(date 1759841761886)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/CinemaVaib.iml" filepath="$PROJECT_DIR$/.idea/CinemaVaib.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Models/UserModel.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Models/UserModel.py b/Models/UserModel.py
new file mode 100644
--- /dev/null	(date 1760789079416)
+++ b/Models/UserModel.py	(date 1760789079416)
@@ -0,0 +1,45 @@
+from core.database import query
+from core.utils import hash_password, verify_password
+
+class UserModel:
+    @staticmethod
+    def find_by_login(login: str):
+        sql = "SELECT * FROM users WHERE login = %s;"
+        rows = query(sql, [login])
+        return rows[0] if rows else None
+
+    @staticmethod
+    def find_by_email(email: str):
+        sql = "SELECT * FROM users WHERE email = %s;"
+        rows = query(sql, [email])
+        return rows[0] if rows else None
+
+    @staticmethod
+    def create_user(login: str, email: str, password: str):
+        sql = "INSERT INTO users (login, email, password_hash) VALUES (%s, %s, %s);"
+        query(sql, [login, email, hash_password(password)])
+        return True
+
+    @staticmethod
+    def check_password(login: str, password: str) -> bool:
+        user = UserModel.find_by_login(login)
+        if user is None:
+            return False
+        stored_hash = user[2]
+        return verify_password(stored_hash, password)
+
+    @staticmethod
+    def last_login(login: str):
+        user = UserModel.find_by_login(login)
+        if user is None:
+            return False
+
+        sql = "UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE login = %s;"
+        query(sql, [login])
+        return True
+
+    @staticmethod
+    def get_user_role_id(login: str):
+        sql = "SELECT role_id FROM users WHERE login = %s;"
+        rows = query(sql, [login])
+        return rows[0][0] if rows else None
\ No newline at end of file
Index: Views/MainView.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Views/MainView.py b/Views/MainView.py
new file mode 100644
--- /dev/null	(date 1760818439627)
+++ b/Views/MainView.py	(date 1760818439627)
@@ -0,0 +1,79 @@
+from PyQt6.QtCore import Qt
+from PyQt6.QtGui import QPixmap, QCursor
+from PyQt6.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QHBoxLayout
+from ViewModels.MainViewModel import MainViewModel
+
+class MainView(QWidget):
+    def __init__(self):
+        super().__init__()
+        self.vm = MainViewModel()
+
+        # Header
+        self.header = QWidget()
+        self.header.setObjectName("HeaderBar")
+
+        h_header = QHBoxLayout(self.header)
+        h_header.setContentsMargins(20,10,20,10)
+        h_header.setSpacing(15)
+
+        self.logo_label = QLabel()
+        pix = QPixmap("images/headerLogo.png")
+        pix = pix.scaledToHeight(38, Qt.TransformationMode.SmoothTransformation)
+        self.logo_label.setPixmap(pix)
+        self.logo_label.setCursor(QCursor(Qt.CursorShape.PointingHandCursor))
+        self.logo_label.setObjectName("HeaderLogo")
+        self.logo_label.mousePressEvent = self.go_home
+
+        self.btn_profile = QPushButton("üë®‚Äçüíº\n–ü—Ä–æ—Ñ–∏–ª—å")
+        self.btn_profile.setObjectName("HeaderButton")
+
+        self.adminBtn = QPushButton(self)
+        self.adminBtn.setText("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
+        self.adminBtn.setVisible(False)
+
+        h_header.addWidget(self.logo_label)
+        h_header.addStretch()
+        h_header.addWidget(self.btn_profile)
+        h_header.addWidget(self.adminBtn)
+
+        # Content
+        self.content = QWidget()
+        self.content.setObjectName("ContentArea")
+
+        v_content = QVBoxLayout(self.content)
+        v_content.setAlignment(Qt.AlignmentFlag.AlignCenter)
+
+        self.content_label = QLabel("–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç üçø")
+        self.content_label.setObjectName("MainLabel")
+        v_content.addWidget(self.content_label)
+
+        # Footer
+        self.footer = QWidget()
+        self.footer.setObjectName("FooterBar")
+
+        h_footer = QHBoxLayout(self.footer)
+        h_footer.setContentsMargins(20, 8, 20, 8)
+        h_footer.setSpacing(10)
+
+        self.footer_text = QLabel("¬© 2025 CinemaVaib ‚Äî –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã, v0.1.0")
+        self.footer_text.setObjectName("FooterText")
+        h_footer.addStretch()
+        h_footer.addWidget(self.footer_text)
+        h_footer.addStretch()
+
+        # –û—Å–Ω–æ–≤–Ω–æ–π layout
+        main_layout = QVBoxLayout(self)
+        main_layout.setContentsMargins(0, 0, 0, 0)
+        main_layout.setSpacing(0)
+        main_layout.addWidget(self.header)
+        main_layout.addWidget(self.content, stretch=1)   # —Ç—è–Ω–µ—Ç—Å—è
+        main_layout.addWidget(self.footer)
+
+    def set_user(self, login):
+        if self.vm.get_role_id(login) == 2:
+            self.adminBtn.setVisible(True)
+        else:
+            self.adminBtn.setVisible(False)
+
+    def go_home(self, event):
+        print("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1759841761985)
+++ b/.idea/.gitignore	(date 1759841761985)
@@ -0,0 +1,5 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/

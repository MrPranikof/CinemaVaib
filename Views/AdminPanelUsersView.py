from PyQt6.QtWidgets import (
    QWidget, QLabel, QVBoxLayout, QPushButton, QHBoxLayout,
    QTableView, QSizePolicy, QMessageBox, QSpacerItem, QDialog,
    QComboBox, QFormLayout, QDialogButtonBox
)
from PyQt6.QtCore import Qt
from core.database import query, datagrid_model


class AdminPanelUsersView(QWidget):
    def __init__(self, go_back=None):
        super().__init__()
        self.go_back = go_back

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(40, 30, 40, 30)
        layout.setSpacing(25)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QHBoxLayout()
        title = QLabel("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        title.setObjectName("TitleLabel")
        title.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignVCenter)
        header.addWidget(title)
        header.addStretch()

        self.btn_back = QPushButton("‚¨Ö –ù–∞–∑–∞–¥")
        self.btn_back.setObjectName("BackButton")
        self.btn_back.setFixedWidth(150)
        if self.go_back:
            self.btn_back.clicked.connect(self.go_back)
        header.addWidget(self.btn_back)

        layout.addLayout(header)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.refresh_table()

        self.view = QTableView()
        self.view.setModel(self.model)
        self.view.setSelectionBehavior(QTableView.SelectionBehavior.SelectRows)
        self.view.setSelectionMode(QTableView.SelectionMode.SingleSelection)
        self.view.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.view.horizontalHeader().setStretchLastSection(True)
        self.view.setAlternatingRowColors(True)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        self.view.selectionModel().selectionChanged.connect(self.on_selection_changed)

        layout.addWidget(self.view, stretch=1)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        management_btns = QHBoxLayout()
        management_btns.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.btn_change_role = QPushButton("üëë –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å")
        self.btn_change_role.clicked.connect(self.change_user_role)
        management_btns.addWidget(self.btn_change_role)

        self.btn_toggle_ban = QPushButton("üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º")
        self.btn_toggle_ban.setObjectName("LogoutButton")
        self.btn_toggle_ban.clicked.connect(self.toggle_user_ban)
        self.btn_toggle_ban.setEnabled(False)  # –û—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        management_btns.addWidget(self.btn_toggle_ban)

        management_btns.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))
        layout.addLayout(management_btns)

        # –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        btns = QHBoxLayout()
        btns.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.btn_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.btn_refresh.clicked.connect(self.refresh_table)
        btns.addWidget(self.btn_refresh)

        self.btn_save = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        self.btn_save.clicked.connect(self.save_changes)
        btns.addWidget(self.btn_save)

        self.btn_delete = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ")
        self.btn_delete.setObjectName("LogoutButton")
        self.btn_delete.clicked.connect(self.delete_selected_user)
        btns.addWidget(self.btn_delete)

        btns.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))
        layout.addLayout(btns)

    # ----------------------------------------------------------
    def refresh_table(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.model = datagrid_model(
            "SELECT u.user_id, u.login, u.email, r.role_name, u.status, "
            "u.created_at, u.updated_at, u.last_login "
            "FROM users u JOIN roles r ON u.role_id = r.role_id "
            "ORDER BY u.user_id"
        )

        if hasattr(self, 'view'):
            self.view.setModel(self.model)
            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
            self.view.selectionModel().selectionChanged.connect(self.on_selection_changed)

        # –î–µ–ª–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏
        for row in range(self.model.rowCount()):
            # user_id, role_name, status, created_at, updated_at, last_login - —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            for col in [0, 3, 4, 5, 6, 7]:
                item = self.model.item(row, col)
                if item:
                    item.setEditable(False)

    # ----------------------------------------------------------
    def on_selection_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ - –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∞"""
        user = self.get_selected_user()

        if user:
            # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            self.btn_toggle_ban.setEnabled(True)

            if user['status'] == 'Active':
                self.btn_toggle_ban.setText("‚õî –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                self.btn_toggle_ban.setObjectName("LogoutButton")
            else:
                self.btn_toggle_ban.setText("‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                self.btn_toggle_ban.setObjectName("ChangePasswordButton")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
            self.btn_toggle_ban.style().unpolish(self.btn_toggle_ban)
            self.btn_toggle_ban.style().polish(self.btn_toggle_ban)
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
            self.btn_toggle_ban.setEnabled(False)
            self.btn_toggle_ban.setText("üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º")
            self.btn_toggle_ban.setObjectName("LogoutButton")

    # ----------------------------------------------------------
    def get_selected_user(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selection = self.view.selectionModel().selectedRows()
        if not selection:
            return None

        row = selection[0].row()
        user_id = self.model.item(row, 0).text()
        login = self.model.item(row, 1).text()
        current_role = self.model.item(row, 3).text()
        current_status = self.model.item(row, 4).text()

        return {
            'user_id': user_id,
            'login': login,
            'role': current_role,
            'status': current_status
        }

    # ----------------------------------------------------------
    def change_user_role(self):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        user = self.get_selected_user()
        if not user:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –∏–∑ –ë–î
        roles_data = query("SELECT role_id, role_name FROM roles ORDER BY role_id")
        if not roles_data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π")
            return

        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
        dialog = QDialog(self)
        dialog.setWindowTitle("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        dialog.setFixedWidth(400)

        layout = QFormLayout(dialog)

        info_label = QLabel(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user['login']}</b><br>"
                            f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: <b>{user['role']}</b>")
        layout.addRow(info_label)

        role_combo = QComboBox()
        for role_id, role_name in roles_data:
            role_combo.addItem(role_name, role_id)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
        current_index = role_combo.findText(user['role'])
        if current_index >= 0:
            role_combo.setCurrentIndex(current_index)

        layout.addRow("–ù–æ–≤–∞—è —Ä–æ–ª—å:", role_combo)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(
            QDialogButtonBox.StandardButton.Ok |
            QDialogButtonBox.StandardButton.Cancel
        )
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addRow(buttons)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        if dialog.exec() == QDialog.DialogCode.Accepted:
            new_role_id = role_combo.currentData()
            new_role_name = role_combo.currentText()

            try:
                query(
                    "UPDATE users SET role_id = %s WHERE user_id = %s",
                    (new_role_id, user['user_id'])
                )
                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—Ö",
                    f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user['login']}' –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{new_role_name}'"
                )
                self.refresh_table()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å:\n{e}")

    # ----------------------------------------------------------
    def toggle_user_ban(self):
        """–ó–∞–±–∞–Ω–∏—Ç—å –∏–ª–∏ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_selected_user()
        if not user:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (–ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º)
        new_status = "Inactive" if user['status'] == "Active" else "Active"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if user['status'] == "Active":
            action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            icon = "‚õî"
            result_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        else:
            action = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            icon = "‚úÖ"
            result_text = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"{icon} –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '<b>{user['login']}</b>'?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if confirm == QMessageBox.StandardButton.Yes:
            try:
                query(
                    "UPDATE users SET status = %s WHERE user_id = %s",
                    (new_status, user['user_id'])
                )
                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—Ö",
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user['login']}' {result_text}"
                )
                self.refresh_table()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:\n{e}")

    # ----------------------------------------------------------
    def save_changes(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ email (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è)"""
        try:
            updated_count = 0
            for row in range(self.model.rowCount()):
                user_id = self.model.item(row, 0).text()
                login = self.model.item(row, 1).text().strip()
                email = self.model.item(row, 2).text().strip()

                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if not login or not email:
                    QMessageBox.warning(
                        self,
                        "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                        f"–õ–æ–≥–∏–Ω –∏ email –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ (—Å—Ç—Ä–æ–∫–∞ {row + 1})"
                    )
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–Ω –∏ email
                query(
                    "UPDATE users SET login = %s, email = %s WHERE user_id = %s",
                    (login, email, user_id)
                )
                updated_count += 1

            QMessageBox.information(
                self,
                "–£—Å–ø–µ—Ö",
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}"
            )
            self.refresh_table()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n{e}")

    # ----------------------------------------------------------
    def delete_selected_user(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_selected_user()
        if not user:
            QMessageBox.warning(self, "–£–¥–∞–ª–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        confirm = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '<b>{user['login']}</b>' (ID: {user['user_id']})?<br><br>"
            f"‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if confirm == QMessageBox.StandardButton.Yes:
            try:
                query("DELETE FROM users WHERE user_id = %s", (user['user_id'],))
                QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user['login']}' —É–¥–∞–ª–µ–Ω")
                self.refresh_table()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{e}")

    def showEvent(self, event):
        super().showEvent(event)
        try:
            from core.animation import AnimationHelper
            AnimationHelper.fade_in(self, 200)
        except:
            pass